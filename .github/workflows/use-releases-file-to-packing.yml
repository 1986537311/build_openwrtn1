name: Use Releases file to Packaging

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Input Release Tag"
        required: true
        default: ""
      kernel_version:
        description: "Kernel version"
        required: true
        default: ""
      kernel_auto:
        description: "Use the latest kernel"
        required: true
        default: true
        type: boolean
      openwrt_ver:
        description: "Openwrt version"
        required: false
        default: ""

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Get variable
        id: codes
        run: |
          rootfs_url="$(
            curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              https://api.github.com/repos/ffuqiangg/build_openwrt/releases/tags/${{ inputs.release_tag }} |
              jq -r '.assets[].browser_download_url' |
              grep ".tar.gz$"
          )"
          echo "DOWNLOAD_URL=${rootfs_url}" >> $GITHUB_ENV

          if [[ "inputs.release_tag" == *"lede"* ]]; then
            echo "package_repo=flippy" >> $GITHUB_OUTPUT
            echo "make_sh=mk_lede_n1.sh" >> $GITHUB_OUTPUT
            echo "distrib_des=Openwrt" >> $GITHUB_OUTPUT
            echo "kernel_repo=breakings/Openwrt" >> $GITHUB_OUTPUT
          if [[ "inputs.release_tag" == *"immortalwrt-18.06-k5.4"* ]]; then
            echo "package_repo=flippy" >> $GITHUB_OUTPUT
            echo "make_sh=mk_immortalwrt_18.06_k5.4_n1.sh" >> $GITHUB_OUTPUT
            echo "distrib_des=Immortalwrt" >> $GITHUB_OUTPUT
            echo "kernel_repo=ffuqiangg/amlogic-s9xxx-armbian" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt-master"* ]]; then
            echo "package_repo=ophub" >> $GITHUB_OUTPUT
            echo "kernel_repo=ophub/kernel" >> $GITHUB_OUTPUT
          fi

      - name: Packaging OpenWrt (ophub)
        if: steps.codes.outputs.package_repo == 'ophub'
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: ${ env.DOWNLOAD_URL }
          openwrt_board: s905d
          openwrt_kernel: ${{ inputs.kernel_version }}
          auto_kernel: ${{ inputs.kernel_auto }}
          kernel_repo: ${{ steps.codes.outputs.kernel_repo }}
          kernel_usage: flippy
          gh_token: ${{ secrets.GH_TOKEN }}

      - name: Rename files
        if: env.PACKAGED_STATUS == 'success'
        run: |
          for file in $(ls ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz*); do
            mv $file $(echo $file | sed 's/openwrt_amlogic/immortalwrt_master/g')
          done

      - name: Package OpenWrt (flippy)
        if: steps.codes.ouputs.package_repo == 'flippy'
        uses: ffuqiangg/openwrt_packit@master
        env:
          SCRIPT_REPO_URL: https://github.com/ffuqiangg/openwrt_packit
          OPENWRT_ARMVIRT: ${ env.DOWNLOAD_URL }
          PACKAGE_SOC: s905d
          KERNEL_REPO_URL: ${{ steps.codes.outputs.kernel_repo }}
          KERNEL_VERSION_NAME: ${{ inputs.kernel_version }}
          KERNEL_AUTO_LATEST: ${{ inputs.kernel_auto }}
          GZIP_IMGS: .gz
          SCRIPT_S905D: ${{ steps.codes.outputs.make_sh }}
          OPENWRT_VER: ${{ inputs.openwrt_ver }}
          SFE_FLOW: 0
          ENABLE_WIFI_K504: 0
          ENABLE_WIFI_K510: 0
          DISTRIB_REVISION: ${{ inputs.openwrt_ver }}
          DISTRIB_DESCRIPTION: ${{ steps.codes.outputs.distrib_des }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ inputs.release_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
