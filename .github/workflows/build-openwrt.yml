name: Build Openwrt

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: true
        default: "immortalwrt-master"
        type: choice
        options:
          - lede
          - immortalwrt-18.06-k5.4
          - immortalwrt-master

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY1_SH: config/${{ inputs.source_branch }}/diy1.sh
  DIY2_SH: config/${{ inputs.source_branch }}/diy2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check server information
      run: |
        echo -e "💬 Server information \n"
        echo -e "💻 Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "🧮 Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "💾 Server memory usage: \n$(free -h) \n"
        echo -e "🗃️ Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"

    - name: Initialization environment
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli* ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -qq install $(cat depends)
        sudo -E systemctl daemon-reload
        #sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo mkdir -p /workdir
        sudo chown ${USER}:${GROUPS} /workdir
        sudo timedatectl set-timezone "$TZ"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Clone source code [ ${{ inputs.source_branch }} ]
      id: codes
      working-directory: /workdir
      if: steps.init.outputs.status == 'success' && !cancelled()
      run: |
        # Set up compilation source code
        if [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
          REPO_URL="https://github.com/coolsnowwolf/lede"
          REPO_BRANCH="master"
          echo "package_repo=flippy" >> $GITHUB_OUTPUT
          echo "make_sh=mk_lede_n1.sh" >> $GITHUB_OUTPUT
          echo "distrib_des=Openwrt" >> $GITHUB_OUTPUT
          echo "kernel_version=5.15.1" >> $GITHUB_OUTPUT
          echo "kernel_repo=breakings/Openwrt" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=R$(date +%y.%m.%d)" >> $GITHUB_ENV
        elif [[ "${{ inputs.source_branch }}" == *"immortalwrt-master"* ]]; then
          REPO_URL="https://github.com/immortalwrt/immortalwrt"
          REPO_BRANCH="master"
          echo "package_repo=ophub" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        elif [ "${{ inputs.source_branch }}" == *"immortalwrt-18.06-k5.4"* ]; then
          REPO_URL="https://github.com/immortalwrt/immortalwrt"
          REPO_BRANCH="openwrt-18.06-k5.4"
          echo "package_repo=flippy" >> $GITHUB_OUTPUT
          echo "make_sh=mk_immortalwrt_18.06_k5.4_n1.sh" >> $GITHUB_OUTPUT
          echo "distrib_des=Immortalwrt" >> $GITHUB_OUTPUT
          echo "kernel_version=5.4.1" >> $GITHUB_OUTPUT
          echo "kernel_repo=ffuqiangg/amlogic-s9xxx-armbian" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        fi

        # Clone source code
        git clone -q --single-branch --depth=1 -b ${REPO_BRANCH} ${REPO_URL} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

        # Set output information
        echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]"
        df -hT ${PWD}
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Load custom feeds
      run: |
        [[ -f "$FEEDS_CONF" ]] && cp -f $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY1_SH
        cd openwrt/
        $GITHUB_WORKSPACE/$DIY1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -d files ] && mv -f files openwrt/files
        [ -e $CONFIG_FILE ] && cp -f $CONFIG_FILE openwrt/.config
        chmod +x $DIY2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Clear server space
      id: clean
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        # Clean up server space
        cd openwrt/
        mkdir output
        cp -f bin/targets/*/*/*rootfs.tar.gz output/
        cp -f .config output/config
        rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

        # Set output information
        df -hT ${PWD}
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Package Openwrt [ ophub ]
      if: steps.codes.outputs.package_repo == 'ophub' && steps.clean.outputs.status == 'success'
      uses: ophub/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/output/*rootfs.tar.gz
        openwrt_board: s905d
        kernel_repo: ophub/kernel
        openwrt_kernel: 6.1.1
        kernel_usage: flippy
        auto_kernel: true
        gh_token: ${{ secrets.GH_TOKEN }}

    - name: Rename files
      if: steps.codes.outputs.package_repo == 'ophub' && env.PACKAGED_STATUS == 'success'
      run: |
        for file in $(ls ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz*); do
          mv $file $(echo $file | sed 's/openwrt_amlogic/immortalwrt_master/g')
        done

    - name: Package Openwrt [ flippy ]
      if: steps.codes.outputs.package_repo == 'flippy' && steps.clean.outputs.status == 'success'
      uses: ffuqiangg/openwrt_packit@master
      env:
        SCRIPT_REPO_URL: https://github.com/ffuqiangg/openwrt_packit
        OPENWRT_ARMVIRT: openwrt/output/*rootfs.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_REPO_URL: ${{ steps.codes.outputs.kernel_repo }}
        KERNEL_VERSION_NAME: ${{ steps.codes.outputs.kernel_version }}
        KERNEL_AUTO_LATEST: true
        GZIP_IMGS: .gz
        SCRIPT_S905D: ${{ steps.codes.outputs.make_sh }}
        OPENWRT_VER: ${{ env.COMPILE_DATE }}
        SFE_FLOW: 0
        ENABLE_WIFI_K504: 0
        ENABLE_WIFI_K510: 0
        DISTRIB_REVISION: ${{ env.COMPILE_DATE }}
        DISTRIB_DESCRIPTION: ${{ steps.codes.outputs.distrib_des }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Organize output file
      if: steps.codes.outputs.package_repo == 'filppy' && env.PACKAGED_STATUS == 'success'
      run: |
        cp -f openwrt/output/config ${{ env.PACKAGED_OYTPUTPATH }}/
        cd ${{ env.PACKAGED_OYTPUTPATH }} 
        sha256sum config > config.sha

    - name: Generate release tag
      id: tag
      if: steps.clean.outputs.status == 'success'
      run: |
        echo "release_tag=${{ inputs.source_branch }}-$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        if [[ ${{ inputs.source_branch }} == *"lede"* ]]; then
          cat > release.txt <<EOF
        ![lede R${{ env.COMPILE_DATE }}](https://img.shields.io/badge/lede-R${{ env.COMPILE_DATE }}-informational?style=flat) [![Telegram](https://img.shields.io/badge/-Telegram-413f42?style=flat&logo=telegram&logoColor=white)](https://t.me/ffuqiangg)  [![Gmail](https://img.shields.io/badge/-Gmail-red?style=flat&logo=gmail&logoColor=white)](mailto:ffuqiangg@gmail.com)  [![Docker](https://img.shields.io/badge/-Docker-informational?style=flat&logo=docker&logoColor=white)](https://hub.docker.com/u/ffuqiangg)
        - 默认IP：192.168.1.99  密码：password
        - 源码来自 [LEDE](https://github.com/coolsnowwolf/lede)，固件只适配 斐讯N1，打包脚本基于 [unifreq/openwrt_packit](https://github.com/unifreq/openwrt_packit) 修改
        - 内核来自暴躁老哥仓库 [breakings/Openwrt](https://github.com/breakings/OpenWrt)
        - 主要插件：Passwall, OpenClash, Dockerman, docker-compose, FileBrowser, Samba4, FTP, Frpc, HD-idle, KMS
        EOF
        elif [[ ${{ inputs.source_branch }} == *"immortalwrt-master"* ]]; then
          cat > release.txt <<EOF
        ![immortalwrt master](https://img.shields.io/badge/immortalwrt-master-informational?style=flat) [![Telegram](https://img.shields.io/badge/-Telegram-413f42?style=flat&logo=telegram&logoColor=white)](https://t.me/ffuqiangg)  [![Gmail](https://img.shields.io/badge/-Gmail-red?style=flat&logo=gmail&logoColor=white)](mailto:ffuqiangg@gmail.com)  [![Docker](https://img.shields.io/badge/-Docker-informational?style=flat&logo=docker&logoColor=white)](https://hub.docker.com/u/ffuqiangg)
        - 默认IP：192.168.1.99  密码：password
        - 源码来自 [Immortalwrt-master](https://github.com/immortalwrt/immortalwrt)，固件只适配 斐讯N1，打包脚本采用 [ophub/amlogic-s9xxx-openwrt](https://github.com/ophub/amlogic-s9xxx-openwrt)
        - 内核来自Smith仓库 [ophub/kernel](https://github.com/ophub/kernel)
        - 主要插件：HomeProxy, OpenClash, MosDNS, Dockerman, docker-compose, FileBrowser, Samba4, FTP, Frpc, HD-idle, KMS
        EOF
        elif [[ ${{ inputs.source_branch }} == *"immortalwrt-18.06-k5.4"* ]]; then
          cat > release.txt <<EOF
        ![immortalwrt 18.06 k5.4](https://img.shields.io/badge/immortalwrt-18.06_k5.4-informational?style=flat) [![Telegram](https://img.shields.io/badge/-Telegram-413f42?style=flat&logo=telegram&logoColor=white)](https://t.me/ffuqiangg)  [![Gmail](https://img.shields.io/badge/-Gmail-red?style=flat&logo=gmail&logoColor=white)](mailto:ffuqiangg@gmail.com)  [![Docker](https://img.shields.io/badge/-Docker-informational?style=flat&logo=docker&logoColor=white)](https://hub.docker.com/u/ffuqiangg)
        - 默认IP：192.168.1.99  密码：password
        - 源码来自 [Immortalwrt-18.06-k5.4](https://github.com/immortalwrt/immortalwrt/tree/openwrt-18.06-k5.4)，固件只适配 斐讯N1，打包脚本基于 [unifreq/openwrt_packit](https://github.com/unifreq/openwrt_packit) 修改
        - 内核来自仓库 [ffuqiangg/amlogic-s9xxx-armbian](https://github.com/ffuqiangg/amlogic-s9xxx-armbian)
        - 主要插件：Passwall, OpenClash, Dockerman, docker-compose, FileBrowser, Samba4, FTP, Frpc, HD-idle, KMS
        EOF
        fi
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Upload firmware to release
      uses: ncipollo/release-action@main
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: release.txt
        artifacts: |
          ${{ env.PACKAGED_OUTPUTPATH }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: codesnas/delete-older-releases@main
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 99
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Telegram notification
      run: |
        COMPILE_DATE_VAL=$(echo ${{ steps.tag.outputs.release_tag }} | rev | cut -d - -f -2 | rev)
        MSG="
        ✅ *${{ inputs.source_branch }} ${{ env.COMPILE_DATE }}*
        
        🔘 *基本信息*
        编译时间： ${COMPILE_DATE_VAL:0:13}:${COMPILE_DATE_VAL:13}
        管理后台： 192.168.1.99
        默认密码： password
        下载地址： [release](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ steps.clean.outputs.build_tag }})

        💬 \[ [Telegram](https://t.me/ffuqiangg) ]  \[ [Github](https://github.com/ffuqiangg) ]  \[ [Docker](https://hub.docker.com/u/ffuqiangg) ]
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown&disable_web_page_preview=true"
